name: SDLC Full Pipeline

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  security-events: write  # Necesario para CodeQL

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Dummy Unit Tests
      run: echo "Running unit tests..." && exit 0

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Integration Test
      run: echo "Running integration tests..." && exit 0

#  sast:
#    runs-on: ubuntu-latest
#    needs: unit-tests
#    steps:
#    - name: Checkout repository
#      uses: actions/checkout@v3

#    - name: SAST - Static Analysis
#      uses: github/codeql-action/init@v3
#      with:
#        languages: 'javascript,python'

#    - name: Perform CodeQL Analysis
#      uses: github/codeql-action/analyze@v3

  sast:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Verificar archivos en la raíz
      run: ls -la

    - name: Instalar dependencias (ShellCheck, Python y paquetes necesarios)
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck python3 python3-pip
        pip3 install pandas matplotlib jinja2
    
    # Se analiza cada archivo shell (.sh) y se genera shellcheck_result.json.
    - name: Ejecutar ShellCheck y generar salida en JSON
      run: |
        shellcheck -f json $(find . -type f -name "*.sh") > shellcheck_result.json || true

    # Se usa la ruta relativa "./" para asegurar que se encuentre el script.
    - name: Convertir JSON a SARIF
      run: |
        python3 ./convert_to_sarif.py shellcheck_result.json shellcheck.sarif

    - name: Generar reporte visual infográfico
      run: |
        python3 ./process_shellcheck.py shellcheck_result.json reporte_informe.html

    ## Se genera un reporte HTML infográfico.
    - name: Subir reporte HTML como artefacto
      uses: actions/upload-artifact@v4
      with:
        name: shellcheck-report-html
        path: reporte_informe.html

    - name: Subir reporte SARIF a Code Scanning de GitHub
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: shellcheck.sarif
  dast:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8069'
      continue-on-error: true

  qa:
    runs-on: ubuntu-latest
    needs: [integration-tests, sast, dast]
    steps:
    - name: Manual QA Placeholder
      run: echo "QA team validates the build manually or via automated UI scripts."

  uat:
    runs-on: ubuntu-latest
    needs: qa
    steps:
    - name: UAT Acceptance Placeholder
      run: echo "Stakeholders test and approve features."

  deploy-production:
    runs-on: ubuntu-latest
    needs: uat
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to Production
      run: echo "Production deployment successful!"
