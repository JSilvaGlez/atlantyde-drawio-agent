name: 游댏 SDLC Pipeline

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  security-events: write
  issues: write


jobs:

  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Python Cached by requeriments 游냀
      uses: ./.github/actions/setup-python-cached
    - name: Dummy Unit Tests
      run: echo "Running unit tests..." && exit 0

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Python Cached by requeriments 游냀
      uses: ./.github/actions/setup-python-cached
    - name: Integration Test
      run: echo "Running integration tests..." && exit 0

  sast:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python Cached by requeriments 游냀
        uses: ./.github/actions/setup-python-cached

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        # with:
          # Si tienes un archivo de configuraci칩n de CodeQL, puedes especificarlo aqu칤
          # config-file: ./path/to/codeql-config.yml

      - name: An치lisis est치tico con CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          output: results/codeql.sarif
        env:
          CODEQL_ACTION_SARIF_RESULTS_OUTPUT_DIR: results
          CODEQL_ACTION_SARIF_RESULTS_OUTPUT_FILE: results/codeql.sarif
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Instalar dependencias para ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck python3 python3-pip

      - name: Ejecutar ShellCheck y generar salida JSON
        run: |
          shellcheck -f json $(find . -type f -name "*.sh") > shellcheck_result.json || true

      - name: Convertir JSON de ShellCheck a SARIF
        run: |
          python3 ./scripts/convert_to_sarif.py shellcheck_result.json results/shellcheck.sarif

      - name: Subir SARIF de CodeQL
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/codeql.sarif
          category: code-scanning

      - name: Validar existencia de ShellCheck SARIF
        run: |
          if [ ! -f results/shellcheck.sarif ]; then
            echo "Error: Archivo shellcheck.sarif no encontrado."
            exit 1
          fi

      - name: Subir SARIF de ShellCheck
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/shellcheck.sarif
          category: code-scanning
  # dast:
  #   runs-on: ubuntu-latest
  #   needs: integration-tests
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: OWASP ZAP Baseline Scan (DAST)
  #       uses: zaproxy/action-baseline@v0.12.0
  #       with:
  #         target: 'https://jsilvaglez.github.io/atlantyde-drawio-agent/'
  #         rules_file_name: '.zap/rules.tsv'
  #         docker_name: 'ghcr.io/zaproxy/zaproxy'  # Imagen oficial mantenida
  #         cmd_options: '-a -I'  # An치lisis activo y sin interrupciones por errores menores
  #         allow_issue_writing: true
  #       continue-on-error: true

  #     - name: Subir reporte ZAP como artefacto
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: zap-report
  #         path: |
  #           report_html.html
  #           report_json.json
  #           report_md.md
  #       continue-on-error: true

  dast:
    runs-on: ubuntu-latest
    needs: integration-tests
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Preparar carpeta con permisos para reportes ZAP
        run: |
          mkdir -p zap_reports
          chmod 777 zap_reports

      - name: OWASP ZAP Baseline Scan (DAST)
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'https://jsilvaglez.github.io/atlantyde-drawio-agent/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -I -J zap_reports/report_json.json -w zap_reports/report_md.md -r zap_reports/report_html.html'
          allow_issue_writing: true
          docker_name: 'ghcr.io/zaproxy/zaproxy'
        continue-on-error: true

      - name: Subir reporte ZAP como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_reports/
        continue-on-error: true

  qa:
    runs-on: ubuntu-latest
    needs: [integration-tests, sast, dast]
    steps:
    - name: Manual QA Placeholder
      run: echo "QA team validates the build manually or via automated UI scripts."

  uat:
    runs-on: ubuntu-latest
    needs: qa
    steps:
    - name: UAT Acceptance Placeholder
      run: echo "Stakeholders test and approve features."

  deploy-production:
    runs-on: ubuntu-latest
    needs: uat
    if: github.event_name == 'push'
    steps:
    - name: Deploy to Production
      run: echo "Production deployment successful!"
