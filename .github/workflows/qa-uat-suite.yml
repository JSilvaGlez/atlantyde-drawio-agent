name: 🔍 ATLANTYDE QA/UAT Suite 
# 🔍 ATLANTYDE QA/UAT Suite Dynamic Web Analysis Suite & Commit Review BOT

on:
  # This workflow is triggered on push to the main branch and on a schedule
  # It runs every day at 7 UTC
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
    paths:
      - 'docs/qa-uat-report/generated/**'
      - 'scripts/playwright_crawl.py'
      - 'scripts/generate_sitemap.py'
      - 'README.md'
      - '.github/workflows/qa-uat-playwright.yml'
  workflow_dispatch:  # Allows manual triggering from the Actions tab
  push:
    branches: [main]
    paths:
      - 'docs/qa-uat-report/generated/**'
      - 'scripts/playwright_crawl.py'
      - 'scripts/generate_sitemap.py'
      - 'README.md'
      - '.github/workflows/qa-uat-playwright.yml'
  schedule:
    - cron: '0 7 * * *'  # Run every day at 7 UTC

permissions:
  contents: write  # Required for committing changes to the repository
  pull-requests: write  # Required for creating pull requests
  actions: read  # Required for using actions
  checks: write  # Required for creating check runs
  statuses: write  # Required for creating commit statuses
  issues: write  # Required for creating issues
  deployments: write  # Required for creating deployments
  pages: write  # Required for deploying to GitHub Pages
  repository-projects: write  # Required for managing repository projects
  discussions: write  # Required for managing discussions
  packages: write  # Required for managing packages

jobs:
  qa-uat:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python Cached by requeriments 🐍
        uses: ./.github/actions/setup-python-cached

      - name: Install QA Playwright browser
        run: |
          python -m playwright install chromium
      
      - name: Crawl and convert pages
        run: |
          python scripts/playwright_crawl.py

      - name: Commit QA outputs (sitemap, extracted docs)
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add docs/sitemap.*
          git commit -m "📄 QA/UAT: Sitemap y documentación extraída" || echo "No hay cambios"
          git push || echo "Push no necesario"

  validate-and-generate:
    needs: [qa-uat]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Set up Python Cached by requeriments 🐍
        uses: ./.github/actions/setup-python-cached

      - name: Generate Sitemap from mkdocs.yml
        run: python scripts/generate_sitemap_from_mkdocs.py

      - name: Check for changes
        run: |
          git diff --exit-code || echo "::warning ::Sitemap actualizado. Por favor, añade este cambio al PR."


  extract-content:
    needs: [validate-and-generate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (por si queremos guardar resultados en repo)
        uses: actions/checkout@v3

      - name: Set up Python Cached by requeriments 🐍
        uses: ./.github/actions/setup-python-cached

      - name: Extract and Analyze Pages
        run: |
          python scripts/analyze_website.py

      - name: Upload markdown output
        uses: actions/upload-artifact@v4
        with:
          name: qa-uat-generated-docs
          path: extracted_docs/

  commit-results:
    needs: [qa-uat, extract-content]
    runs-on: ubuntu-latest
    env:
      deploy_required: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install jq and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Check and download QA/UAT artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Buscando artifact: qa-uat-playwright-md..."
          ARTIFACT_ID=$(gh api repos/${{ github.repository }}/actions/artifacts \
            | jq -r '.artifacts[] | select(.name=="qa-uat-playwright-md") | .id' | head -n 1)

          if [ -z "$ARTIFACT_ID" ]; then
            echo "⚠️ Artifact 'qa-uat-playwright-md' NO encontrado. Se omite la descarga."
            exit 0
          fi

          echo "✅ Artifact encontrado. Descargando..."
          mkdir -p docs/qa-uat-report/generated

          DOWNLOAD_URL=$(gh api -H "Accept: application/vnd.github+json" \
            -X GET "/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID" \
            | jq -r '.archive_download_url')

          curl -L -H "Authorization: token $GH_TOKEN" "$DOWNLOAD_URL" -o artifact.zip
          unzip -o artifact.zip -d docs/qa-uat-report/generated/
          echo "📦 Artifact extraído"

      - name: Commit QA/UAT markdown pages
        run: |
          echo "📝 Buscando archivos Markdown generados..."
          if ls docs/qa-uat-report/generated/*.md 1> /dev/null 2>&1; then
            echo "✅ Archivos encontrados. Preparando commit..."
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"
            git add docs/qa-uat-report/generated/*.md
            git commit -m "docs: actualiza reportes QA/UAT desde Playwright" || echo "ℹ️ No hay cambios nuevos."
            git push || echo "🔃 Push no necesario o ya actualizado."
            echo "deploy_required=true" >> $GITHUB_ENV
          else
            echo "⚠️ No se encontraron archivos .md. Omitiendo commit y despliegue."
            echo "deploy_required=false" >> $GITHUB_ENV
          fi

      - name: 🔍 Mostrar valor de deploy_required (debug)
        run: echo "📦 deploy_required=${{ env.deploy_required }}"

      - name: 🚀 Desplegar si hay cambios
        if: ${{ env.deploy_required }} == 'true'
        run: |
          echo "📡 Desplegando documentación actualizada a GitHub Pages..."
          pip install mkdocs-material
          mkdocs gh-deploy --force
